/*
 */
package swing.components.settings.manual;

import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import swing.components.settings.manual.playeritem.exceptions.DuplicateNameException;
import swing.components.settings.manual.playeritem.PlayerItem;
import swing.components.settings.manual.playeritem.PlayerItemCollection;
import swing.components.settings.manual.playeritem.PlayerItemRenderer;
import swing.components.settings.manual.playeritem.exceptions.TooManyPlayersException;

/**
 *
 * @author adam
 */
public class JPanelManualSub extends javax.swing.JPanel {

    private DefaultListModel<PlayerItem> listModel;
    private PlayerItemCollection playerItemsCollection;

    /**
     * Creates new form JPanelManualSub
     */
    public JPanelManualSub() {
        listModel = new DefaultListModel<>();
        playerItemsCollection = new PlayerItemCollection();
        initComponents();
        addMockPlayers();
        initListeners();
    }

    public void addBackButtonListener(ActionListener al) {
        this.jButtonBack.addActionListener(al);
    }

    private void initListeners() {
        this.jPanelAddPlayer1.addPropertyChangeListener(
                JPanelAddPlayer.ADD_PLAYER_EVENT,
                new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent pce) {
                addPlayer();
            }
        });
    }

    private void addPlayer() {
        String playerName = jPanelAddPlayer1.getPlayerName();
        boolean isHuman = jPanelAddPlayer1.isPlayerHuman();
        try {
            PlayerItem pi = this.playerItemsCollection.addPlayer(playerName, isHuman);
            this.listModel.addElement(pi);
            jPanelAddPlayer1.clear();
        } catch (DuplicateNameException ex) {
            jPanelAddPlayer1.showErrorMessage("This name already exists!");
        } catch (TooManyPlayersException ex) {
            jPanelAddPlayer1.showErrorMessage("Too many players, no more room!");
        }
    }

    private void removePlayer() {
        int selection = this.jList1.getSelectedIndex();
        if (selection > -1) {
            PlayerItem pi = this.listModel.getElementAt(selection);
            playerItemsCollection.removePlayer(pi.getName());
            listModel.removeElement(pi);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxAllowMutipleRequests = new javax.swing.JCheckBox();
        jCheckBoxForceShowOfSeries = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButtonStart = new javax.swing.JButton();
        jButtonBack = new javax.swing.JButton();
        jPanelAddPlayer1 = new swing.components.settings.manual.JPanelAddPlayer();
        jButtonRemovePlayer = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(600, 400));
        setMinimumSize(new java.awt.Dimension(600, 400));

        jCheckBoxAllowMutipleRequests.setText("Allow Mutiple Requests");
        jCheckBoxAllowMutipleRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllowMutipleRequestsActionPerformed(evt);
            }
        });

        jCheckBoxForceShowOfSeries.setText("Force Show Of Series");

        jList1.setModel(listModel);
        jList1.setCellRenderer(new PlayerItemRenderer());
        jScrollPane1.setViewportView(jList1);

        jButtonStart.setText("Start Game");

        jButtonBack.setText("Back");

        jButtonRemovePlayer.setText("Remove");
        jButtonRemovePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemovePlayerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxForceShowOfSeries)
                            .addComponent(jCheckBoxAllowMutipleRequests)
                            .addComponent(jPanelAddPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonRemovePlayer)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelAddPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jCheckBoxAllowMutipleRequests)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxForceShowOfSeries))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRemovePlayer)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxAllowMutipleRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllowMutipleRequestsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxAllowMutipleRequestsActionPerformed

    private void jButtonRemovePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemovePlayerActionPerformed
        removePlayer();
    }//GEN-LAST:event_jButtonRemovePlayerActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonRemovePlayer;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JCheckBox jCheckBoxAllowMutipleRequests;
    private javax.swing.JCheckBox jCheckBoxForceShowOfSeries;
    private javax.swing.JList jList1;
    private swing.components.settings.manual.JPanelAddPlayer jPanelAddPlayer1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void addMockPlayers() {
        try {
            this.playerItemsCollection.addPlayer("Moxie", true);
            this.playerItemsCollection.addPlayer("Doxie", true);
            this.playerItemsCollection.addPlayer("Coxie", false);
            this.playerItemsCollection.addPlayer("Noxie", false);
            this.playerItemsCollection.addPlayer("Soxie", true);
        } catch (DuplicateNameException ex) {
            System.out.println("oups1");
        } catch (TooManyPlayersException ex) {
            System.out.println("oups2");
        }

        for (PlayerItem playerItem : this.playerItemsCollection.getList()) {
            this.listModel.addElement(playerItem);
        }
    }
}
