/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swing.components.game;

import engine.Engine;
import engine.players.Player;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import swing.components.game.play.PlayAreaFactory;
import swing.components.game.play.PlayEvents;
import swing.components.game.play.playarea.JPanelHand;

/**
 *
 * @author Natalie
 */
public class JPanelGame extends javax.swing.JPanel {

    private Engine engine;
    private swing.components.game.graveyard.JPanelGraveyard jPanelGraveyard;
    private swing.components.game.play.JPanelPlayAreaCards jPanelPlayAreaCards;
    private swing.components.game.playerlist.JPanelPlayerList jPanelPlayerList;

    /**
     * Creates new form JPanelGame
     */
    public JPanelGame() {
        initComponents();
        this.engine = null;
    }

    public void initGame(Engine engine) {
        this.engine = engine;
        initHandClass();
        initGraveyard();
        initPlayAreaCards();
        initPlayersList();
        revalidate();
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        this.jPanelPlayerList = new swing.components.game.playerlist.JPanelPlayerList();
        this.jPanelPlayAreaCards = new swing.components.game.play.JPanelPlayAreaCards();
        this.jPanelGraveyard = new swing.components.game.graveyard.JPanelGraveyard();

        setLayout(new java.awt.BorderLayout());
        add(jPanelPlayerList, java.awt.BorderLayout.WEST);
        add(jPanelPlayAreaCards, java.awt.BorderLayout.CENTER);
        add(jPanelGraveyard, java.awt.BorderLayout.EAST);

    }

    private void initGraveyard() {
        this.jPanelGraveyard.setEngine(engine);
    }

    private void initPlayAreaCards() {
        for (Player player : this.engine.getPlayers()) {
            String playerName = player.getName();
            JPanel jPanelPlayArea = PlayAreaFactory.makeJPanelPlayArea(player);
            initCardListeners(jPanelPlayArea);
            this.jPanelPlayAreaCards.addCard(jPanelPlayArea, playerName);
        }
    }

    private void initPlayersList() {
        this.jPanelPlayerList.setEngine(engine);
    }

    private void initHandClass() {
        JPanelHand.setAvailableSeries(engine.getAvailableSeries());

    }

    private void initCardListeners(JPanel jPanelPlayArea) {
        jPanelPlayArea.addPropertyChangeListener(PlayEvents.EVENT_PLAY_COMPUTER_TURN, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        jPanelPlayArea.addPropertyChangeListener(PlayEvents.EVENT_REQUEST, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        jPanelPlayArea.addPropertyChangeListener(PlayEvents.EVENT_THROW, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        jPanelPlayArea.addPropertyChangeListener(PlayEvents.EVENT_SKIP, new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                advanceTurn();
            }
        });
    }
    
    private void advanceTurn(){
        this.engine.advanceTurn();
        this.jPanelPlayAreaCards.showCard(this.engine.getCurrentPlayer().getName());
        this.jPanelPlayerList.refreshCurrentPlayer();
    }
    
}
