/*
 * SwingClient.java
 *
 * Created on Dec 17, 2011, 10:27:24 AM
 */
package examples.swing;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.*;

/**
 *
 * @author blecherl
 */
public class SwingClient extends javax.swing.JFrame implements ServerMessageListener {

    SocketClient socketClient;

    /**
     * Creates new form SwingClient
     */
    public SwingClient() {
        initComponents();
        setSize(400, 300);
        setLocationRelativeTo(null);

        ServerHostNameDialog serverHostNameDialog = new ServerHostNameDialog(this, true);
        serverHostNameDialog.setLocationRelativeTo(null);
        serverHostNameDialog.setVisible(true);

        socketClient = new SocketClient(serverHostNameDialog.getHostname(), serverHostNameDialog.getPort(), this);
    }

    @Override
    public void onServerMessage(final String message) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                serverOutputTextPane.setText(serverOutputTextPane.getText() + "\n" + message);
            }
        });
    }

    @Override
    public void onError(final Exception exception) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                //set the text color to red in order to indicated there was an error
                serverOutputTextPane.setForeground(Color.RED);
                serverOutputTextPane.setText(serverOutputTextPane.getText() + "\n" + exception.getMessage());
                //disable the input text field and the send button
                userInputTextField.setEnabled(false);
                sendButton.setEnabled(false);
            }
        });
    }

    private void sendMessageToServer() {
        String message = userInputTextField.getText();

        socketClient.sendMessage(message);

        //clear the message
        userInputTextField.setText(null);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new JPanel();
        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        userInputTextField = new JTextField();
        sendButton = new JButton();
        jScrollPane1 = new JScrollPane();
        serverOutputTextPane = new JTextPane();
        jLabel2 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Swing Chat Client");
        setName("mainFrame"); // NOI18N
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new BorderLayout(0, 5));

        jPanel2.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanel2.setLayout(new BorderLayout(0, 5));

        jPanel1.setLayout(new BorderLayout(5, 5));

        jLabel1.setText("Enter text:");
        jLabel1.setFocusable(false);
        jPanel1.add(jLabel1, BorderLayout.LINE_START);

        userInputTextField.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                userInputTextFieldKeyPressed(evt);
            }
        });
        jPanel1.add(userInputTextField, BorderLayout.CENTER);

        sendButton.setText("Send");
        sendButton.setFocusable(false);
        sendButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        jPanel1.add(sendButton, BorderLayout.LINE_END);

        jPanel2.add(jPanel1, BorderLayout.PAGE_END);

        serverOutputTextPane.setEditable(false);
        serverOutputTextPane.setFocusable(false);
        jScrollPane1.setViewportView(serverOutputTextPane);

        jPanel2.add(jScrollPane1, BorderLayout.CENTER);

        jLabel2.setText("Server Answers:");
        jPanel2.add(jLabel2, BorderLayout.PAGE_START);

        getContentPane().add(jPanel2, BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userInputTextFieldKeyPressed(KeyEvent evt) {//GEN-FIRST:event_userInputTextFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sendMessageToServer();
        }
    }//GEN-LAST:event_userInputTextFieldKeyPressed

    private void sendButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        sendMessageToServer();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        socketClient.close();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private JButton sendButton;
    private JTextPane serverOutputTextPane;
    private JTextField userInputTextField;
    // End of variables declaration//GEN-END:variables
}
